Project Save State: Cloudbeds API Connector
Date: 2025-07-02
Status: SUCCESS - We have established a stable, working connection to the Cloudbeds Insights API.

This document summarizes the known working configuration for this project. This is the baseline to revert to if future changes cause issues.

1. Core Architecture
Frontend: A simple HTML page (public/index.html) with a table to display data. Client-side JavaScript (public/script.js) makes a fetch request to our backend.

Backend: A Node.js server (server.js) using the Express framework. It exposes a single API endpoint (/api/metrics) for the frontend to call.

Data Flow:

Browser loads index.html.

script.js calls /api/metrics on our server.

server.js receives the request.

The server authenticates with Cloudbeds to get a fresh access_token.

The server makes a POST request to the Cloudbeds Insights API.

The server receives the data, formats it into a simple array, and sends it to the browser.

script.js receives the data and populates the HTML table.

2. Known Working API Endpoints
After extensive testing, we have confirmed the following endpoints and methods are correct:

Authentication (Token Refresh)
Method: POST

URL: https://hotels.cloudbeds.com/api/v1.1/access_token

Body: x-www-form-urlencoded with grant_type, client_id, client_secret, and refresh_token.

Data Insights Query
Method: POST

URL: https://api.cloudbeds.com/datainsights/v1.1/reports/query/data?mode=Run

Headers:

Authorization: Bearer {accessToken}

Content-Type: application/json

X-PROPERTY-ID: {your_property_id}

Body: A detailed JSON object specifying the dataset_id, filters, columns, etc. This is the primary method for getting performance metrics.

Reservations (Confirmed Fallback)
Method: GET

URL: https://api.cloudbeds.com/api/v1.1/getReservations

Usage: This was used for debugging and is a confirmed working endpoint for retrieving raw reservation data if the Insights API fails.

3. Key Learnings & Debugging History
404 Errors: The primary challenge was discovering the correct base URL and path for the Insights API. Many attempts (e.g., /getDataInsights, /reports/daily) resulted in 404 Not Found errors.

POST vs. GET: We initially assumed a GET request, but the Insights API requires a POST request with a JSON payload.

Custom Header: The X-PROPERTY-ID header is mandatory for the Insights API call.

Occupancy Calculation: The occupancy field directly from the Insights API (dataset_id: 7) returns 0. The scalable solution is to request rooms_sold and capacity from the API and calculate occupancy manually (rooms_sold / capacity). Note: The current stable version does not do this and shows 0% occupancy.

This configuration represents a stable foundation for further development.